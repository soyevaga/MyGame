"question13", "question14")]
# Calcular la matriz de covarianzas
cov_matrix <- cov(variables)
# Renombrar filas y columnas
colnames(cov_matrix) <- rownames(cov_matrix) <- paste0("Q", 1:14)
# Crear layout con espacio para leyenda a la derecha
layout(matrix(c(1, 2), nrow = 1), widths = c(4, 1))  # Panel 1 = heatmap, Panel 2 = leyenda
# Paleta de colores
colores <- colorRampPalette(c("white", "skyblue", "blue"))(100)
# Dibujar el heatmap
par(mar = c(5, 5, 4, 1))  # Margen derecho pequeño para heatmap
image(1:14, 1:14, t(apply(cov_matrix, 2, rev)),
col = colores, axes = FALSE, xlab = "", ylab = "", main = "Matriz de Covarianzas")
axis(1, at = 1:14, labels = colnames(cov_matrix))
axis(2, at = 1:14, labels = rev(rownames(cov_matrix)))
# Añadir los valores numéricos
for (i in 1:14) {
for (j in 1:14) {
text(i, j, round(cov_matrix[15 - j, i], 2), cex = 0.7)
}
}
# Márgenes adecuados para la leyenda
par(mar = c(5, 1, 4, 3))
# Valores de la escala
legend_vals <- seq(min(cov_matrix), max(cov_matrix), length.out = 100)
# Dibujar una columna de leyenda (con ancho de 2 valores en x)
image(x = seq(0, 1, length.out = 2),  # x tiene dos valores => 1 pixel de ancho
y = legend_vals,
z = matrix(legend_vals, nrow = 100, ncol = 2),
col = colores,
axes = FALSE,
xlab = "",
ylab = "")
# Dibujar el heatmap
image(1:14, 1:14, t(apply(cov_matrix, 2, rev)),
col = colorRampPalette(c("red", "white", "blue"))(100),
axes = FALSE, xlab = "", ylab = "", main = "Matriz de Covarianzas")
# Añadir nombres de variables en los ejes
axis(1, at = 1:14, labels = colnames(cov_matrix))
axis(2, at = 1:14, labels = rev(rownames(cov_matrix)))
# Añadir los valores redondeados en las celdas
for (i in 1:14) {
for (j in 1:14) {
text(i, j, round(cov_matrix[15 - j, i], 2))
}
}
table(form$question11, form$question14)
# Dibujar el heatmap
image(1:14, 1:14, t(apply(cov_matrix, 2, rev)),
col = colorRampPalette(c("red", "white", "blue"))(100),
axes = FALSE, xlab = "", ylab = "", main = "Matriz de Covarianzas")
# Añadir nombres de variables en los ejes
axis(1, at = 1:14, labels = colnames(cov_matrix))
axis(2, at = 1:14, labels = rev(rownames(cov_matrix)))
# Añadir los valores redondeados en las celdas
for (i in 1:14) {
for (j in 1:14) {
text(i, j, round(cov_matrix[15 - j, i], 2))
}
}
table(form$question11, form$question14)
form <- read.csv("form.csv", header = TRUE, sep = ",", encoding = "UTF-8")
variables <- form[, c("question1", "question2", "question3","question4",
"question5", "question6","question7", "question8",
"question9", "question10", "question11", "question12",
"question13", "question14")]
# Calcular la matriz de covarianzas
cov_matrix <- cov(variables)
View(cov_matrix)
# Cambiar nombres de filas y columnas
colnames(cov_matrix) <- rownames(cov_matrix) <- c("Q1", "Q2", "Q3", "Q4", "Q5",
"Q6", "Q7", "Q8", "Q9", "Q10",
"Q11", "Q12", "Q13", "Q14")
# Dibujar el heatmap
image(1:14, 1:14, t(apply(cov_matrix, 2, rev)),
col = colorRampPalette(c("red", "white", "blue"))(100),
axes = FALSE, xlab = "", ylab = "", main = "Matriz de Covarianzas")
# Añadir nombres de variables en los ejes
axis(1, at = 1:14, labels = colnames(cov_matrix))
axis(2, at = 1:14, labels = rev(rownames(cov_matrix)))
# Añadir los valores redondeados en las celdas
for (i in 1:14) {
for (j in 1:14) {
text(i, j, round(cov_matrix[15 - j, i], 2))
}
}
table(form$question11, form$question14)
form <- read.csv("form.csv", header = TRUE, sep = ",", encoding = "UTF-8")
variables <- form[, c("question1", "question2", "question3","question4",
"question5", "question6","question7", "question8",
"question9", "question10", "question11", "question12",
"question13", "question14")]
# Calcular la matriz de covarianzas
cov_matrix <- cov(variables)
View(cov_matrix)
# Cambiar nombres de filas y columnas
colnames(cov_matrix) <- rownames(cov_matrix) <- c("Q1", "Q2", "Q3", "Q4", "Q5",
"Q6", "Q7", "Q8", "Q9", "Q10",
"Q11", "Q12", "Q13", "Q14")
# Dibujar el heatmap
image(1:14, 1:14, t(apply(cov_matrix, 2, rev)),
col = colorRampPalette(c("white", "skyblue", "blue"))(100),
axes = FALSE, xlab = "", ylab = "", main = "Matriz de Covarianzas")
# Añadir nombres de variables en los ejes
axis(1, at = 1:14, labels = colnames(cov_matrix))
axis(2, at = 1:14, labels = rev(rownames(cov_matrix)))
# Añadir los valores redondeados en las celdas
for (i in 1:14) {
for (j in 1:14) {
text(i, j, round(cov_matrix[15 - j, i], 2))
}
}
table(form$question11, form$question14)
######Descriptivo global########
data <- read.csv("users.csv", header = TRUE, sep = ",", encoding = "UTF-8")
summary(data)
sd(data$age, na.rm = TRUE)
sd(data$hours, na.rm = TRUE)
barplot(table(data$gender), main="Participantes por género", ylab="Número de participantes", col="turquoise3")
barplot(table(data$age), main="Participantes por edad", ylab="Número de participantes", col="salmon")
t.test(age ~ birthday, data = data)
fisher.test(table(data$birthday, data$gender))
tabla <- table(data$birthday, data$gender)
prop.table(tabla, margin = 1)
barplot(prop.table(tabla, margin = 1), beside = TRUE, legend = TRUE, col = c("turquoise3", "salmon"))
######Descriptivo por grupo######
barplot(table(data$birthday), main="Participantes por grupo", ylab="Número de participantes", col="chartreuse")
summary(data)
data <- data[data$age >= 10 & data$age <= 90, ]
data <- read.csv("users.csv", header = TRUE, sep = ",", encoding = "UTF-8")
data <- read.csv("users.csv", header = TRUE, sep = ",", encoding = "UTF-8")
data <- data[data$age >= 10 & data$age <= 90, ]
summary(data)
sd(data$age, na.rm = TRUE)
sd(data$hours, na.rm = TRUE)
barplot(table(data$gender), main="Participantes por género", ylab="Número de participantes", col="turquoise3")
barplot(table(data$age), main="Participantes por edad", ylab="Número de participantes", col="salmon")
t.test(age ~ birthday, data = data)
fisher.test(table(data$birthday, data$gender))
tabla <- table(data$birthday, data$gender)
prop.table(tabla, margin = 1)
barplot(prop.table(tabla, margin = 1), beside = TRUE, legend = TRUE, col = c("turquoise3", "salmon"))
######Descriptivo por grupo######
barplot(table(data$birthday), main="Participantes por grupo", ylab="Número de participantes", col="chartreuse")
tabla <- table(data$birthday, data$gender)
table(data$gender)
data <- read.csv("users.csv", header = TRUE, sep = ",", encoding = "UTF-8")
table(data$gender)
tabla <- table(data$birthday, data$gender)
summary(data)
sd(data$age, na.rm = TRUE)
sd(data$hours, na.rm = TRUE)
# Cargar paquetes necesarios
library(ggplot2)
library(dplyr)
library(xtable)
# Leer datos
data <- read.csv("space_check.csv", header = TRUE, sep = ",", encoding = "UTF-8")
data$userID <- as.factor(data$userID)
###############ANÁLISIS EXPLORATORIO############################################
# Resumen por grupo
resumen <- data %>%
group_by(difficulty) %>%
summarise(across(c(boredom, frustration, max_speed),
list(media = mean, mediana = median, sd = sd),
na.rm = TRUE))
xtable(resumen, digits = 2)
# Histogramas por grupo
ggplot(data, aes(x = boredom, fill = difficulty)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs( x = "aburrimiento") +
theme_minimal()
ggplot(data, aes(x = frustration, fill = difficulty)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs( x = "frustración") +
theme_minimal()
ggplot(data, aes(x = max_speed, fill = difficulty)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs(x = "velocidad") +
theme_minimal()
# Export png a 300
par(cex.main = 1.8, cex.axis = 1.5, cex.lab = 1.6)
# Boxplots por grupo
colores <- c("turquoise3", "salmon")
boxplot(boredom ~ difficulty, data = data, col = colores)
boxplot(frustration ~ difficulty, data = data, col = colores)
boxplot(max_speed ~ difficulty, data = data, col = colores)
# Export png a 650
# Gráfico de dispersión
ggplot(data, aes(x = max_speed, y = boredom, color = difficulty)) +
geom_point(alpha = 0.6)  +
labs(title = "Dispersión: Dificultad vs Aburrimiento", x = "Velocidad Máxima", y = "Aburrimiento")
ggplot(data, aes(x = max_speed, y = frustration, color = difficulty)) +
geom_point(alpha = 0.6)  +
labs(title = "Dispersión: Dificultad vs Frustración", x = "Velocidad Máxima", y = "Frustración")
###############MODELOS Y CORRELACIÓN############################################
# SPEARMAN
by(data, data$difficulty, function(sub) {
list(
boredom = cor.test(sub$max_speed, sub$boredom, method = "spearman", exact = FALSE),
frustration = cor.test(sub$max_speed, sub$frustration, method = "spearman", exact = FALSE)
)
})
# Modelo Lineal
modelo_boredom <- lm(max_speed ~ boredom * difficulty, data = data)
summary(modelo_boredom)
plot(modelo_boredom)
# Caracterizar datos
# t-test: solo si distribuye normal
t.test()
# Cargar paquetes necesarios
library(ggplot2)
library(dplyr)
library(xtable)
# Leer datos
data <- read.csv("tiles_check.csv", header = TRUE, sep = ",", encoding = "UTF-8")
data$userID <- as.factor(data$userID)
###############ANÁLISIS EXPLORATORIO############################################
# Resumen por grupo
resumen <- data %>%
group_by(difficulty) %>%
summarise(across(c(boredom, frustration, max_level),
list(media = mean, mediana = median, sd = sd),
na.rm = TRUE))
xtable(resumen, digits = 2)
# Histogramas por grupo
ggplot(data, aes(x = boredom, fill = difficulty)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs( x = "aburrimiento") +
theme_minimal()
ggplot(data, aes(x = frustration, fill = difficulty)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs( x = "frustración") +
theme_minimal()
ggplot(data, aes(x = max_level, fill = difficulty)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs(x = "nivel") +
theme_minimal()
# Export png a 300
par(cex.main = 1.8, cex.axis = 1.5, cex.lab = 1.6)
# Boxplots por grupo
colores <- c("turquoise3", "salmon")
boxplot(boredom ~ difficulty, data = data, col = colores)
boxplot(frustration ~ difficulty, data = data, col = colores)
boxplot(max_level ~ difficulty, data = data, col = colores)
# Export png a 650
# Gráfico de dispersión
ggplot(data, aes(x = max_level, y = boredom, color = difficulty)) +
geom_point(alpha = 0.6)  +
labs(title = "Dispersión: Dificultad vs Aburrimiento", x = "Nivel Máximo", y = "Aburrimiento")
ggplot(data, aes(x = max_level, y = frustration, color = difficulty)) +
geom_point(alpha = 0.6)  +
labs(title = "Dispersión: Dificultad vs Frustración", x = "Nivel Máximo", y = "Frustración")
###############MODELOS Y CORRELACIÓN############################################
# SPEARMAN
by(data, data$difficulty, function(sub) {
list(
boredom = cor.test(sub$max_level, sub$boredom, method = "spearman", exact = FALSE),
frustration = cor.test(sub$max_level, sub$frustration, method = "spearman", exact = FALSE)
)
})
# Modelo Lineal
modelo_boredom <- lm(max_level ~ boredom * difficulty, data = data)
summary(modelo_boredom)
plot(modelo_boredom)
# Caracterizar datos
# t-test: solo si distribuye normal
t.test()
# Cargar paquetes necesarios
library(ggplot2)
library(dplyr)
library(xtable)
# Leer datos
data <- read.csv("cards_check.csv", header = TRUE, sep = ",", encoding = "UTF-8")
data$userID <- as.factor(data$userID)
###############ANÁLISIS EXPLORATORIO############################################
# Resumen por grupo
resumen <- data %>%
group_by(difficulty) %>%
summarise(across(c(boredom, frustration, max_level),
list(media = mean, mediana = median, sd = sd),
na.rm = TRUE))
xtable(resumen, digits = 2)
# Histogramas por grupo
ggplot(data, aes(x = boredom, fill = difficulty)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs( x = "aburrimiento") +
theme_minimal()
ggplot(data, aes(x = frustration, fill = difficulty)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs( x = "frustración") +
theme_minimal()
ggplot(data, aes(x = max_level, fill = difficulty)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs(x = "nivel") +
theme_minimal()
# Export png a 300
par(cex.main = 1.8, cex.axis = 1.5, cex.lab = 1.6)
# Boxplots por grupo
colores <- c("turquoise3", "salmon")
boxplot(boredom ~ difficulty, data = data, col = colores)
boxplot(frustration ~ difficulty, data = data, col = colores)
boxplot(max_level ~ difficulty, data = data, col = colores)
# Export png a 650
# Gráfico de dispersión
ggplot(data, aes(x = max_level, y = boredom, color = difficulty)) +
geom_point(alpha = 0.6)  +
labs(title = "Dispersión: Dificultad vs Aburrimiento", x = "Nivel Máximo", y = "Aburrimiento")
ggplot(data, aes(x = max_level, y = frustration, color = difficulty)) +
geom_point(alpha = 0.6)  +
labs(title = "Dispersión: Dificultad vs Frustración", x = "Nivel Máximo", y = "Frustración")
###############MODELOS Y CORRELACIÓN############################################
# SPEARMAN
by(data, data$difficulty, function(sub) {
list(
boredom = cor.test(sub$max_level, sub$boredom, method = "spearman", exact = FALSE),
frustration = cor.test(sub$max_level, sub$frustration, method = "spearman", exact = FALSE)
)
})
# Modelo Lineal
modelo_boredom <- lm(max_level ~ boredom * difficulty, data = data)
summary(modelo_boredom)
plot(modelo_boredom)
# Caracterizar datos
# t-test: solo si distribuye normal
t.test()
# Cargar paquetes necesarios
library(ggplot2)
library(dplyr)
library(xtable)
# Leer datos
data <- read.csv("cards_check.csv", header = TRUE, sep = ",", encoding = "UTF-8")
data$userID <- as.factor(data$userID)
###############ANÁLISIS EXPLORATORIO############################################
# Resumen por grupo
resumen <- data %>%
group_by(difficulty) %>%
summarise(across(c(boredom, frustration, max_level),
list(media = mean, mediana = median, sd = sd),
na.rm = TRUE))
xtable(resumen, digits = 2)
# Cargar paquetes necesarios
library(ggplot2)
library(dplyr)
library(xtable)
# Leer datos
data <- read.csv("space_check.csv", header = TRUE, sep = ",", encoding = "UTF-8")
data$userID <- as.factor(data$userID)
###############ANÁLISIS EXPLORATORIO############################################
# Resumen por grupo
resumen <- data %>%
group_by(difficulty) %>%
summarise(across(c(boredom, frustration, max_speed),
list(media = mean, mediana = median, sd = sd),
na.rm = TRUE))
xtable(resumen, digits = 2)
# Cargar paquetes necesarios
library(ggplot2)
library(dplyr)
library(xtable)
# Leer datos
data <- read.csv("tiles_check.csv", header = TRUE, sep = ",", encoding = "UTF-8")
data$userID <- as.factor(data$userID)
###############ANÁLISIS EXPLORATORIO############################################
# Resumen por grupo
resumen <- data %>%
group_by(difficulty) %>%
summarise(across(c(boredom, frustration, max_level),
list(media = mean, mediana = median, sd = sd),
na.rm = TRUE))
xtable(resumen, digits = 2)
View(data)
######Descriptivo global########
data <- read.csv("users.csv", header = TRUE, sep = ",", encoding = "UTF-8")
data <- data[data$age >= 10 & data$age <= 90, ]
summary(data)
sd(data$age, na.rm = TRUE)
sd(data$hours, na.rm = TRUE)
data <- read.csv("users.csv", header = TRUE, sep = ",", encoding = "UTF-8")
barplot(table(data$gender), main="Participantes por género", ylab="Número de participantes", col="turquoise3")
barplot(table(data$age), main="Participantes por edad", ylab="Número de participantes", col="salmon")
t.test(age ~ birthday, data = data)
fisher.test(table(data$birthday, data$gender))
table(data$gender)
tabla <- table(data$birthday, data$gender)
prop.table(tabla, margin = 1)
barplot(prop.table(tabla, margin = 1), beside = TRUE, legend = TRUE, col = c("turquoise3", "salmon"))
######Descriptivo por grupo######
barplot(table(data$birthday), main="Participantes por grupo", ylab="Número de participantes", col="chartreuse")
table(data$gender)
table(data$birthday)
library(dplyr)
space <- read.csv("space.csv", header = TRUE, sep = ",", encoding = "UTF-8")
form <- read.csv("form.csv", header = TRUE, sep = ",", encoding = "UTF-8")
# Juntar las tablas
form_space <- form %>%
filter(game == "space")
form_space <- space %>%
left_join(form_space, by = "userID") %>%
filter(!is.na(question3))
# Quedarse solo con la última repetición de cada usuario
data <- form_space %>%
group_by(userID) %>%
slice_max(order_by = time, n = 1, with_ties = FALSE) %>%
ungroup()
# Test para H1: aburrimiento (lineal > exponencial)
wilcox.test(question3 ~ difficulty, data = data,
subset = difficulty %in% c("Lineal", "Exponencial"),
alternative = "greater", var.equal = FALSE)
t.test(question3 ~ difficulty, data = data,
subset = difficulty %in% c("Lineal", "Exponencial"),
alternative = "greater", var.equal = FALSE)
# Test para H2: frustración (lineal < exponencial)
wilcox.test(question6 ~ difficulty, data = data,
subset = difficulty %in% c("Lineal", "Exponencial"),
alternative = "less", var.equal = FALSE)
t.test(question6 ~ difficulty, data = data,
subset = difficulty %in% c("Lineal", "Exponencial"),
alternative = "less", var.equal = FALSE)
library(dplyr)
cards <- read.csv("cards.csv", header = TRUE, sep = ",", encoding = "UTF-8")
form <- read.csv("form.csv", header = TRUE, sep = ",", encoding = "UTF-8")
# Juntar las tablas
form_cards <- form %>%
filter(game == "cards")
form_cards <- cards %>%
left_join(form_cards, by = "userID") %>%
filter(!is.na(question3))
# Quedarse solo con la última repetición de cada usuario
data <- form_cards %>%
group_by(userID) %>%
slice_max(order_by = time, n = 1, with_ties = FALSE) %>%
ungroup()
# Test para H1: aburrimiento (lineal > exponencial)
wilcox.test(question3 ~ difficulty, data = data,
subset = difficulty %in% c("Lineal", "Exponencial"),
alternative = "greater", var.equal = FALSE)
t.test(question3 ~ difficulty, data = data,
subset = difficulty %in% c("Lineal", "Exponencial"),
alternative = "greater", var.equal = FALSE)
# Test para H2: frustración (lineal < exponencial)
wilcox.test(question6 ~ difficulty, data = data,
subset = difficulty %in% c("Lineal", "Exponencial"),
alternative = "less", var.equal = FALSE)
t.test(question6 ~ difficulty, data = data,
subset = difficulty %in% c("Lineal", "Exponencial"),
alternative = "less", var.equal = FALSE)
library(dplyr)
tiles <- read.csv("tiles.csv", header = TRUE, sep = ",", encoding = "UTF-8")
form <- read.csv("form.csv", header = TRUE, sep = ",", encoding = "UTF-8")
# Juntar las tablas
form_tiles <- form %>%
filter(game == "tiles")
form_tiles <- tiles %>%
left_join(form_tiles, by = "userID") %>%
filter(!is.na(question3))
# Quedarse solo con la última repetición de cada usuario
data <- form_tiles %>%
group_by(userID) %>%
slice_max(order_by = time, n = 1, with_ties = FALSE) %>%
ungroup()
# Test para H1: aburrimiento (lineal > exponencial)
t.test(question3 ~ difficulty, data = data,
subset = difficulty %in% c("Lineal", "Exponencial"),
alternative = "greater", var.equal = FALSE)
# Test para H2: frustración (lineal < exponencial)
t.test(question6 ~ difficulty, data = data,
subset = difficulty %in% c("Lineal", "Exponencial"),
alternative = "less", var.equal = FALSE)
library(dplyr)
space <- read.csv("space.csv", header = TRUE, sep = ",", encoding = "UTF-8")
form <- read.csv("form.csv", header = TRUE, sep = ",", encoding = "UTF-8")
# Juntar las tablas
form_space <- form %>%
filter(game == "space")
form_space <- space %>%
left_join(form_space, by = "userID") %>%
filter(!is.na(question3))
# Quedarse solo con la última repetición de cada usuario
form_space <- form_space %>%
group_by(userID) %>%
slice_max(order_by = time, n = 1, with_ties = FALSE) %>%
ungroup()
form_space_lineal <- subset(form_space, difficulty == "Lineal")
form_space_exponencial <- subset(form_space, difficulty == "Exponencial")
###########LINEAL###################################################
data <- form_space_lineal
cor.test(data$question3, data$shoots, method = "spearman")
cor.test(data$question6, data$shoots, method = "spearman")
cor.test(data$question3, data$evens_killed, method = "spearman")
cor.test(data$question6, data$evens_killed, method = "spearman")
cor.test(data$question3, data$odds_killed, method = "spearman")
cor.test(data$question6, data$odds_killed, method = "spearman")
cor.test(data$question3, data$speed, method = "spearman")
cor.test(data$question6, data$speed, method = "spearman")
cor.test(data$question3, data$self_killed, method = "spearman")
cor.test(data$question6, data$self_killed, method = "spearman")
cor.test(data$question3, data$moving_time, method = "spearman")
cor.test(data$question6, data$moving_time, method = "spearman")
data <- form_space_exponencial
cor.test(data$question3, data$shoots, method = "spearman")
cor.test(data$question6, data$shoots, method = "spearman")
cor.test(data$question3, data$evens_killed, method = "spearman")
cor.test(data$question6, data$evens_killed, method = "spearman")
cor.test(data$question3, data$odds_killed, method = "spearman")
cor.test(data$question6, data$odds_killed, method = "spearman")
cor.test(data$question3, data$speed, method = "spearman")
cor.test(data$question6, data$speed, method = "spearman")
cor.test(data$question3, data$self_killed, method = "spearman")
cor.test(data$question6, data$self_killed, method = "spearman")
cor.test(data$question3, data$moving_time, method = "spearman")
cor.test(data$question6, data$moving_time, method = "spearman")
